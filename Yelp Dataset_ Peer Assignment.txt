Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000 records
Select * from attribute;
ii. Business table =10000 records
Select * from business;
iii. Category table =10000 records
Select * from category;
iv. Checkin table =10000 records
Select * from checkin;
v. elite_years table = 10000 records
Select * from elite_years;
vi. friend table = 10000 records
select * from friend;
vii. hours table = 10000 records
select * from hours;
viii. photo table = 10000 records
select * from photo;
ix. review table = 10000 records
select * from review;
x. tip table = 10000 records
select * from tip;
xi. user table = 10000 records




2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000
Select distinct(id) from business;
ii. Hours = 1562
Select distinct(business_id) from hours;
iii. Category = 2643
Select distinct(business_id) from category;
iv. Attribute = 1115
Select distinct(business_id) from attribute;
v. Review =10000
Select distinct(id) from review;
vi. Checkin = 493
Select distinct(business_id) from checkin;
vii. Photo = 10000
Select distinct(id) from photo;
viii. Tip = 537
Select distinct(user_id) from tip;
ix. User = 10000
Select distinct(id) from user;
x. Friend = 11 (COMMENT: I got it by looking at the table because they were just 11 records)
Select distinct(user_id) from friend;
xi. Elite_years =2780
Select distinct(user_id) from elite_years;

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.


3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: NO
	
	
	SQL code used to arrive at answer: 
Select* from user where id is null or name is null or review_count is null or yelping_since is null or useful is null or funny is null or cool is null or fans is null or average_stars is null or compliment_hot is null or compliment_more is null or compliment_profile is null or compliment_cute is null or compliment_list is null or compliment_note is null or compliment_plain is null or compliment_cool is null or compliment_funny is null or compliment_writer is null or compliment_photos is null;



4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min: 1		max: 5		avg: 3.7082 
		
	
	ii. Table: Business, Column: Stars
	
		min: 1.0 	max: 5.0		avg: 3.6549 
		
	
	iii. Table: Tip, Column: Likes
	
		min: 0		max: 2		avg: 0.0144 
		
	
	iv. Table: Checkin, Column: Count
	
		min: 1		max: 53 	avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min: 0		max: 2000 		avg: 24.2995

EX: Select min(review_count) from user;
    Select max(review_count) from user;
    Select avg(review_count) from user;

I did this for each table above depending on the name of the table and the name of the column.



5. List the cities with the most reviews in descending order:

SQL code used to arrive at answer:

+-----------------+----------------+
| city            | num_of_reviews |
+-----------------+----------------+
| Las Vegas       |          82854 |
| Phoenix         |          34503 |
| Toronto         |          24113 |
| Scottsdale      |          20614 |
| Charlotte       |          12523 |
| Henderson       |          10871 |
| Tempe           |          10504 |
| Pittsburgh      |           9798 |
| Montréal        |           9448 |
| Chandler        |           8112 |
| Mesa            |           6875 |
| Gilbert         |           6380 |
| Cleveland       |           5593 |
| Madison         |           5265 |
| Glendale        |           4406 |
| Mississauga     |           3814 |
| Edinburgh       |           2792 |
| Peoria          |           2624 |
| North Las Vegas |           2438 |
| Markham         |           2352 |
| Champaign       |           2029 |
| Stuttgart       |           1849 |
| Surprise        |           1520 |
| Lakewood        |           1465 |
| Goodyear        |           1155 |
+-----------------+----------------+
(Output limit exceeded, 25 of 362 total rows shown)
	
	
	Copy and Paste the Result Below: 
SELECT city, SUM(review_count) AS 'num_of_reviews' from business group by city order by num_of_reviews desc;



6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer: 
Select city, stars as star_rating, count(stars) as count from business where city = 'Avon' group by stars;


Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):

+------+-------------+-------+
| city | star_rating | count |
+------+-------------+-------+
| Avon |         1.5 |     1 |
| Avon |         2.5 |     2 |
| Avon |         3.5 |     3 |
| Avon |         4.0 |     2 |
| Avon |         4.5 |     1 |
| Avon |         5.0 |     1 |
+------+-------------+-------+


ii. Beachwood

SQL code used to arrive at answer:
Select city, stars as star_rating, count(stars) as count from business where city = 'Beachwood' group by stars;


Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
+-----------+-------------+-------+
| city      | star_rating | count |
+-----------+-------------+-------+
| Beachwood |         2.0 |     1 |
| Beachwood |         2.5 |     1 |
| Beachwood |         3.0 |     2 |
| Beachwood |         3.5 |     2 |
| Beachwood |         4.0 |     1 |
| Beachwood |         4.5 |     2 |
| Beachwood |         5.0 |     5 |
+-----------+-------------+-------+



7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
Select name,review_count from user order by review_count desc limit 3;
	
		
Copy and Paste the Result Below:
+--------+--------------+
| name   | review_count |
+--------+--------------+
| Gerald |         2000 |
| Sara   |         1629 |
| Yuri   |         1339 |
+--------+--------------+



8. Does posing more reviews correlate with more fans?

NO, as we see in the table all of them have reviews more than the number of their fans. 
EX: Amy has 609 reviews but her fans were just 503.

	Please explain your findings and interpretation of the results:

Select name, review_count, fans from user order by fans desc;
+-----------+--------------+------+
| name      | review_count | fans |
+-----------+--------------+------+
| Amy       |          609 |  503 |
| Mimi      |          968 |  497 |
| Harald    |         1153 |  311 |
| Gerald    |         2000 |  253 |
| Christine |          930 |  173 |
| Lisa      |          813 |  159 |
| Cat       |          377 |  133 |
| William   |         1215 |  126 |
| Fran      |          862 |  124 |
| Lissa     |          834 |  120 |
| Mark      |          861 |  115 |
| Tiffany   |          408 |  111 |
| bernice   |          255 |  105 |
| Roanna    |         1039 |  104 |
| Angela    |          694 |  101 |
| .Hon      |         1246 |  101 |
| Ben       |          307 |   96 |
| Linda     |          584 |   89 |
| Christina |          842 |   85 |
| Jessica   |          220 |   84 |
| Greg      |          408 |   81 |
| Nieves    |          178 |   80 |
| Sui       |          754 |   78 |
| Yuri      |         1339 |   76 |
| Nicole    |          161 |   73 |
+-----------+--------------+------+
(Output limit exceeded, 25 of 10000 total rows shown)



9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: There are more reviews for the word 'love' which are 1780 than the word 'hate' which are 232.

	
	SQL code used to arrive at answer:
	1. Select count(text) from review where text like'%love%';

	2. Select count(text) from review where text like'%hate%';



10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	
Select name, fans from user order by fans desc limit 10;
	
	
Copy and Paste the Result Below:

| name      | fans |
+-----------+------+
| Amy       |  503 |
| Mimi      |  497 |
| Harald    |  311 |
| Gerald    |  253 |
| Christine |  173 |
| Lisa      |  159 |
| Cat       |  133 |
| William   |  126 |
| Fran      |  124 |
| Lissa     |  120 |
+-----------+------+





Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.


  I chose Las Vegas as a City, and Restaurants as a category.

SELECT b.city, c.category, b.name,
    CASE
        WHEN b.stars BETWEEN 2 AND 3 THEN 'Low Rating'
        WHEN b.stars BETWEEN 4 AND 5 THEN 'High Rating'
    END AS Ratings
    FROM business b INNER JOIN category c 
ON b.id = c.business_id where city = 'Las Vegas' and category = 'Restaurants';

+-----------+-------------+---------------------+-------------+
| city      | category    | name                | Ratings     |
+-----------+-------------+---------------------+-------------+
| Las Vegas | Restaurants | Jacques Cafe        | High Rating |
| Las Vegas | Restaurants | Wingstop            | Low Rating  |
| Las Vegas | Restaurants | Big Wong Restaurant | High Rating |
| Las Vegas | Restaurants | Hibachi-San         | High Rating |
+-----------+-------------+---------------------+-------------+
	
i. Do the two groups you chose to analyze have a different distribution of hours?

Yes, they have different hours. We can see that the hours for Wingstop is 11:00 _0:00 on Saturday while the hours of Big Wong Restaurent 
10:00 _ 23:00 on Saturday.

select business.name, business.city , category.category, business.stars, hours.hours from (business inner join category on business.id = category.business_id) inner join hours on hours.business_id = category.business_id where business.city = 'Las Vegas' and category.category = 'Restaurants' group by business.stars;

+---------------------+-----------+-------------+-------+----------------------+
| name                | city      | category    | stars | hours                |
+---------------------+-----------+-------------+-------+----------------------+
| Wingstop            | Las Vegas | Restaurants |   3.0 | Saturday|11:00-0:00  |
| Big Wong Restaurant | Las Vegas | Restaurants |   4.0 | Saturday|10:00-23:00 |
+---------------------+-----------+-------------+-------+----------------------+


ii. Do the two groups you chose to analyze have a different number of reviews?

Yes, they have different number of reviews. For Wingstop the total reviews were 123 while the total number of reviews for 
Big Wong Restaurant is 768.


Select business.name, business.city , category.category, business.stars, hours.hours, business.review_count from (business inner join category on business.id = category.business_id) inner join hours on hours.business_id = category.business_id where business.city = 'Las Vegas'and category.category = 'Restaurants' group by business.stars;

+---------------------+-----------+-------------+-------+----------------------+--------------+
| name                | city      | category    | stars | hours                | review_count |
+---------------------+-----------+-------------+-------+----------------------+--------------+
| Wingstop            | Las Vegas | Restaurants |   3.0 | Saturday|11:00-0:00  |          123 |
| Big Wong Restaurant | Las Vegas | Restaurants |   4.0 | Saturday|10:00-23:00 |          768 |
+---------------------+-----------+-------------+-------+----------------------+--------------+
         
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

I can say that both businesses have different locations. We can cnclude that Wingstop locates on 5045 W Tropicana Ave  , while Big Wong Restaurant locates on 5040 Spring Mountain Rd.

Select business.name, business.city , business.address, category.category, business.stars, hours.hours, business.review_count, business.postal_code from (business inner join category on business.id = category.business_id) inner join hours on hours.business_id = category.business_id where business.city = 'Las Vegas'and category.category = 'Restaurants' group by business.stars;

+---------------------+-----------+-------------------------+-------------+-------+----------------------+--------------+
| name                | city      | address                 | category    | stars | hours                 | review_count | postal_code |
+---------------------+-----------+-------------------------+-------------+-------+----------------------+--------------+
| Wingstop            | Las Vegas | 5045 W Tropicana Ave    | Restaurants |   3.0 | Saturday|11:00-0:00  |          123 | 89103       |
| Big Wong Restaurant | Las Vegas | 5040 Spring Mountain Rd | Restaurants |   4.0 | Saturday|10:00-23:00 |          768 | 89146       |
+---------------------+-----------+-------------------------+-------------+-------+----------------------+--------------



SQL code used for analysis:

Select business.name, business.city , business.address, category.category, business.stars, hours.hours, business.review_count, business.postal_code from (business inner join category on business.id = category.business_id) inner join hours on hours.business_id = category.business_id where business.city = 'Las Vegas'and category.category = 'Restaurants' group by business.stars;




		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.



+---------+-------------------+-----------------+
| is_open | sum(review_count) | Num_of_business |
+---------+-------------------+-----------------+
|       0 |             35261 |            1520 |
|       1 |            269300 |            8480 |
+---------+-------------------+-----------------+
		
i. Difference 1: There are more open business than closed ones. The total number of businesses that are open is 8480 
while the closed ones are 1520. 
         
         
ii. Difference 2: Open business recieved more reviews than the closed ones. 
         
         
         
SQL code used for analysis:   
Select is_open, sum(review_count), count(name) as 'Num_of_business' from business group by is_open; 

	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:

Here is my problem: Write a SQL query to find the top 10 users who have the highest average number of stars in their reviews. Include the user's name and their average star rating in the results. Order the results by the average star rating in descending order.


	
i. Indicate the type of analysis you chose to do:

For this problem, we used the following query: Based on the "UserID" column, I executed an INNER JOIN between the "user" and "review" tables. - I also calculated the average star rating for each user's reviews using the AVG function. - The results were then grouped by the user's name and ordered descendingly based on the average star rating. - I limited the results to 10 users to guarantee that just the top 10 users were included.

1. Aggregation: I calculated the average star rating for each user's reviews using the AVG function.
2. Joining: I used inner joining to connect the user and review tables using the user_id column.
3. Grouping: I sorted the results based on the user's name.
4. Ordering: I sorted the results by star rating in descending order.
5. Limiting: I limited the output to the top ten people with the highest average star rating.
         
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:

The type of data required for the analysis comprises information from the "user" and "review" tables. It requires the following information : user IDs, user names, star ratings given in reviews, and the accompanying user IDs linked with those reviews. 

I chose these datas because they are critical for determining the average star rating per user and recognizing the top users based on their reviews. The user's name allows us to present results in an an accessible way. 


                  
iii. Output of your finished dataset:

+------------+--------------+
| name       | AverageStars |
+------------+--------------+
| Amy        |          5.0 |
| Angel      |          5.0 |
| Angela     |          5.0 |
| April      |          5.0 |
| Arman      |          5.0 |
| Brianna    |          5.0 |
| Donna      |          5.0 |
| Elena      |          5.0 |
| Eric       |          5.0 |
| Fratantoni |          5.0 |
+------------+--------------+
iv. Provide the SQL code you used to create your final dataset:

Select user.name, AVG(review.Stars) AS AverageStars From user JOIN review ON user.id = review.id GROUP BY user.Name ORDER BY AverageStars DESC LIMIT 10;
